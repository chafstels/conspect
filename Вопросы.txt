Лекция: Linux Commands

 Что такое Linux? Что такое Ubuntu? Какие дистрибутивы бывают?
 Какую комбинацию клавиш нужно использовать для открытия терминала?
 Какую команду нужно использовать для создания файла с любым расширением?
 Какую команду нужно использовать для создания папки?
 Через какую команду можно поменять директорию (папку)?
 Как удалить папку с файлами?
 С помощью какой команды удалить файл?
 Как посмотреть абсолютный путь до текущей директории?
 Что такое Nano?
 Как переименовать папку или название файла?
 Какую команду нужно использовать для перемещения файла либо папки в другую
директорию?
 Какую команду нужно использовать для просмотра содержимого файла?
 Как скопировать папку либо файл в другую директорию?

Лекция: Numbers in Python

 Какие операторы вы знаете?
 Что значит оператор **?
 Какие типы данных вы знаете в числах?
 Что значит abs?
 Чем отличается Decimal от Float?
 Что такое Divmod и как он работает?
 Что такое complex?
 Для чего используют функцию pow?
 Что делает оператор %?
 Как можно преобразовать числа в шестнадцатеричную строку?
 Что делает функция OCT()?
 Как можно получить число pi в Python?

Лекция: Lists

 Что такое список и как его создать?
 Какие типы данных могут быть элементами списка?
 Чем отличается sort() от sorted()?
 Как можно получить удаленный элемент из списка при использовании метода
pop()?
 Чем отличаются методы remove() и pop()?
 Как обращаться к элементам вложенного списка?
 Что делает метод insert и сколько аргументов он принимает?
 Какими способами помимо метода reverse() можно получить список в обратном
порядке?
 Чем отличается метод clear() от метода del()
 Как проверить наличие элемента в списке?
 Каким наиболее удобным способом можно получить последовательный список
чисел? (range)
 Какой метод используется для того, что объединить элементы списка в строку?

Лекция: Tuples

 Что такое кортеж?
 Чем отличается кортеж от списка?
 Для чего используются кортежи?
 Сколько весят кортежи по сравнению со списками?
 Назовите основные методы кортежей
 Можно ли создать кортеж из списка? Если да, то как?
 Как можно создать кортеж, не используя круглые скобки?
 Какие типы данных могут храниться в кортежах?
 Можно ли изменить список, вложенный в кортеж?
 Как создать кортеж, содержащий только один элемент?
 Как можно изменить элемент кортежа?
 Можно ли объединять кортежи?
 Как можно пройтись по кортежу?

Лекция: Set

 Что такое множество?
 Какие типы данных может хранить в себе множество?
 Чем отличается множества от словарей?
 Что делает данный код 2 in {1, 2, 3, 4}? True or False?
 Объясните метод set.issubset() и какой символ можно использовать вместо этого
метода?
 Как работает метод set.union()? Что будет если туда передать больше двух
множеств?
 Чем отличается метод set.discard() от метода set.remove()?
 Какими способами можно добавить элемент во множество?
 Какие методы есть для определения пересечения во множества и как они работают?
 Что делает методы set.difference_update()?

Лекция: Dictionary and methods

 Что такое словарь и что он может в себе хранить?
 Каким типом данных может быть ключ и значение?
 Как можно создать словарь?
 Как создать новый ключ в словаре и присвоить ему значение?
 Какими способами можно получить значение из словаря?
 Могут ли быть 2 одинаковых ключа в словаре и что происходит со значением?
 Какими способами можно удалить элемент из словаря?
 Что делает метод get?
 Что делают методы items, values, keys?
 Что делает метод fromkeys?
 В чем отличие метода pop и popitem?
 Что делает метод setdefault?

Лекция: Loops

 Расскажите, как работает цикл while и цикл for?
 Для чего используются циклы?
 Что делает функция range() и какие аргументы она может в себя принимать?
 Может ли цикл содержать в себе другой цикл?
 Какой оператор осуществляет выход из цикла?
 Что делает оператор continue?
 Что такое итерация, итерируемый объект и итератор?
 Может ли цикл содержать логические операторы?
 Как пройтись циклом по словарю: по ключам, по значениям, по ключам и
значениям словаря?
 Можно ли создать бесконечный цикл? Если да, то как?
 Что выполняет волшебное слово ‘else’ в цикле while и for?
 Как пройтись через цикл в обратном порядке (в range)?

Лекция: Логические операторы чек-лист

 К чему приравнивают False и True в программировании? (0, 1)
 Чем отличаются операции присваивания и сравнения и какими знаками они
обозначаются?
 Чем отличается логический оператор AND от OR?
 Какой оператор превращает False в True и True в False?
 Можно ли использовать if вместо elif при наличии нескольких условий?
Например:
If x > y:
Pass
If x <y:
Pass
If x == y:
Pass
 Что выведет следующий код print((1, ‘a’)>(‘b’, 2))?
 Что выведет следующий код print((1, -1, 0)>(1, 1))?
 Что выведет следующий код print({True, 1, 1.0})?
 Какие методы (из прошедших вами тем) возвращают True или False? (isdigit,
isalpha...)
 Чем отличается a is b от a == b?
 Сколько elif конструкции можно использовать в if?

Лекция: Функция Range.

List comprehension. Dict comprehension, Set comprehention

1) Как работает функция Range?
2) Каким образом можно создать список используя Range?
3) Что будет результатом следующего кода:
for i in range(1, 30):
print(i)
4) Какие параметры можно передавать в Range?
5) Можно ли передавать условия в Range?
6) Что такое List comprehension?
7) Можно ли совместить условие if и цикл for в генераторе списков?
8) Можно ли добавить условие или неколько в генератор списка?
9) Будет ли работать следующий код:
divided = [x for x in range(100) if x % 2 == 0 if x % 6 == 0]
10) Где будут прописываться условия в генераторе?
11) Что будет результатом следующего кода:
S = [x**2 for x in range(10)]
12) Что такое Dict comprehension и в чем сходство с List comprehension?


Лекция: Встроенные функции. Map, filter, join, lambda.
● Что делает встроенная функция map, сколько и какие аргументы
она принимает?
● Что возвратит данный код:
● a = [‘1’, ‘2’, ‘3’, ‘4’, ‘5’]
● a = map(int, a)
● print(a)
● В чем преимущество функции map по сравнению с обычным
циклом?
● Что возвращает функция map?
● Что такое lambda и для чего используется?
● Сколько функций lambda можно использовать в map?
● Сколько аргументов принимает lambda?
● Можно ли использовать логические и условные операторы в
функции lambda?
● Что делает функция filter, сколько и какие аргументы она
принимает?
● В чем схожесть и отличия функций map и filter?
● Можно ли использовать filter в функции map?
● Что делает функция join?
● Какой тип данных возвращает функция join?
● Какие типы данных принимает в качестве аргумента функция
join?
● Что такое функция zip, что она делает?
● Что такое функция enumerate, что она делает?


Лекция: Введение в функции. Рекурсия.

1) Что такое функции в Python? Каким ключевым словом обозначаются функции?
2) Какие виды аргументов может принимать функция?
3) Обязательно ли указывать return в конце функции? Что будет если не указать его?
4) Как вызывается функция и где передаются аргументы для нее?
5) Сколько раз во время написания кода я могу вызывать функцию?
6) Можно ли вызвать функцию в функции?
7) Сколько аргументов можно передать одной функции?
8) Что выполняет следующая функция? И что она вернет?

def func(a, b, c=2):
return a + b + c
func(1, 2)

9) Будет ли работать следующая функция или будет ошибка?

def func(x, y, z):
pass

10) Что такое рекурсия? Опишите принцип работы.
11) Где можно применить рекурсию?


Лекция: Оператор try-except

 Для чего нужен оператор try-except?
 Назовите известные вам исключения?
 Как работает try, except, finally?
 Что означает “голое” исключение и почему его не рекомендуется применять?
 Можно ли в except передать сразу несколько исключений? Если да, то как?
 Для чего используется else в try-except и что он делает?
 Чем отличается else от finally?
 Как можно сгенерировать исключение?

Лекция: Области видимости и пространства имён

Что такое локальное пространство имен?
Что такое глобальное пространство имен?
Что такое встроенное пространство имен?
Что означает Enclosed в LEGB?
Что возвращает функция locals()?
Что будет при вызове функции locals() внутри функции и снаружи функции?
Что выведет данный код:
x = 2
def check():
x = x * 2
print(x)
check()
С помощью какого ключевого слова можно объявить глобальную переменную внутри
функции?
Для чего и в каких случаях используется ключевое слово nonlocal?
Перечислите известные вам Build-ins функции.


Лекция: Decorators

1) Что такое декораторы в Python?
2) Что такое функции высших порядков?
3) Что выведет следующий код?
def benchmark(func):
import time
def wrapper():
start = time.time()
func()
end = time.time()
print('[*] Время выполнения: {} секунд.'.format(end-start))
return wrapper
@benchmark
def fetch_webpage():
import requests
webpage = requests.get('https://google.com')
fetch_webpage()
4) Что такое wrapper?
5) Сколько раз я могу применять один и тот же декоратор?
6) Каким образом нужно обращаться к декоратору?
7) Можно ли применить несколько декораторов к одной и той же функции? И важен ли
порядок их применения?
